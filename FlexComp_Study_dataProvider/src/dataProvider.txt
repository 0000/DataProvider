
ListBase  ScrollControlBase  UIComponent  FlexSprite  Sprite  DisplayObjectContainer  InteractiveObject 
DisplayObject  EventDispatcher  Object 

======================================================================================================
dataProvider property   

dataProvider:Object   [read-write]
표시하는 데이터세트입니다. 이 property에 의해, 대부분의 타입의 object를 데이터 프로바이더로서 사용할 수 있게 됩니다. 
dataProvider property를 Array 로 설정했을 경우는, ArrayCollection 에 변환됩니다. property를 XML object로 설정했을 경우는,
1 개의 아이템만을 가지는 XMLListCollection 에 변환됩니다. property를 XMLList 로 설정했을 경우는, XMLListCollection 에 
변환됩니다. property를, IList 또는 ICollectionView 인터페이스를 Implements하는 object로 설정했을 경우는, object가 직접 
사용됩니다. 

변환의 결과,dataProvider property를 취득하면, 항상 ICollectionView 가 됩니다. 따라서, 반드시 property의 설정시에 사용한 
object의 타입이 된다고는 할 수 없습니다. 데이터 프로바이더로 데이터를 변경하는 경우는, 이 동작에 대해 인식해 두는 것이 
중요합니다. 원의 데이터에의 변경은 검출되지 않는 경우가 있습니다만,dataProvider property로부터 취득한 ICollectionView 
object에의 변경은 검출됩니다. 

디폴트치null. 

이 property는 데이터 바인딩의 소스로서 사용할 수 있습니다. 

Implements 
    public function get dataProvider():Object 
    public function set dataProvider(value:Object ):void 

======================================================================================================

* dataProvider 개체는 배열 형태이거나 list형태 이어야 한다.

========================================================================================================
dataProvider를 사용하는 컴퍼넌트는 다음과 같습니다. 

Repeater 컴퍼넌트
LineChart 컨트롤등의 차트 컨트롤
ColorPicker 컨트롤
ComboBox 컨트롤
DataGrid 컨트롤
DateField 컨트롤
HorizontalList 컨트롤
List 컨트롤
Menu 컨트롤
MenuBar 컨트롤
PopUpMenuButton 컨트롤
TileList 컨트롤
Tree 컨트롤
ButtonBar 컨트롤
LinkBar 컨트롤
TabBar 컨트롤
ToggleButtonBar 컨트롤

-dataProvider를 사용하는 컴포넌트들은 ListBase 클레스를 상속받고 있습니다. 그러기 때문에 dataProvider를
 사용할 수 있는것이죠.

Package mx.controls.listClasses 

-그럼 ListBase클레스의 dataProvider속성에 대해서 알아보겠습니다.
========================================================================================================================
dataProvider property   

dataProvider:Object   [read-write]
표시하는 데이터세트입니다. 이 property에 의해, 대부분의 타입의 object를 데이터 프로바이더로서 사용할 수 있게 됩니다. 
dataProvider property를 Array 로 설정했을 경우는, ArrayCollection 에 변환됩니다. property를 XML object로 설정했을 경우는,
1 개의 아이템만을 가지는 XMLListCollection 에 변환됩니다. property를 XMLList 로 설정했을 경우는, XMLListCollection 에 
변환됩니다. property를, IList 또는 ICollectionView 인터페이스를 Implements하는 object로 설정했을 경우는, object가 직접 
사용됩니다. 

변환의 결과,dataProvider property를 취득하면, 항상 ICollectionView 가 됩니다. 따라서, 반드시 property의 설정시에 사용한 
object의 타입이 된다고는 할 수 없습니다. 데이터 프로바이더로 데이터를 변경하는 경우는, 이 동작에 대해 인식해 두는 것이 
중요합니다. 원의 데이터에의 변경은 검출되지 않는 경우가 있습니다만,dataProvider property로부터 취득한 ICollectionView 
object에의 변경은 검출됩니다. 

디폴트치null. 

이 property는 데이터 바인딩의 소스로서 사용할 수 있습니다. 

Implements 
    public function get dataProvider():Object 
    public function set dataProvider(value:Object ):void 

========================================================================================================================

ListBase의 dataProvider (get,set)
        public function get dataProvider():Object
    {
        // if we are running a data change effect, return the true
        // data provider, rather than the ModifiedCollectionView wrapper.
        if (actualCollection)
            return actualCollection;
            
        return collection;
    }

    /**
     *  @private
     */
    public function set dataProvider(value:Object):void
    {
        if (collection)
        {
            collection.removeEventListener(CollectionEvent.COLLECTION_CHANGE, collectionChangeHandler);
        }

        if (value is Array)
        {
            collection = new ArrayCollection(value as Array);
        }
        else if (value is ICollectionView)
        {
            collection = ICollectionView(value);
        }
        else if (value is IList)
        {
            collection = new ListCollectionView(IList(value));
        }
        else if (value is XMLList)
        {
            collection = new XMLListCollection(value as XMLList);
        }
        else if (value is XML)
        {
            var xl:XMLList = new XMLList();
            xl += value;
            collection = new XMLListCollection(xl);
        }
        else
        {
            // convert it to an array containing this one item
	    이 항목을 포함하는 배열로 변환
            var tmp:Array = [];
            if (value != null)
                tmp.push(value);
            collection = new ArrayCollection(tmp);
        }
        // get an iterator for the displaying rows.  The CollectionView's
        // main iterator is left unchanged so folks can use old DataSelector
        // methods if they want to
        iterator = collection.createCursor();
        collectionIterator = collection.createCursor(); //IViewCursor(collection);

        // trace("ListBase added change listener");
        collection.addEventListener(CollectionEvent.COLLECTION_CHANGE, collectionChangeHandler, false, 0, true);

        clearSelectionData();

        var event:CollectionEvent = new CollectionEvent(CollectionEvent.COLLECTION_CHANGE);
        event.kind = CollectionEventKind.RESET;
        collectionChangeHandler(event);
        dispatchEvent(event);

        itemsNeedMeasurement = true;
        invalidateProperties();
        invalidateSize();
        invalidateDisplayList();
    }

    보시는것과 같이 getter,setter로 되어있습니다. 

    set dataProvider를 보시면 Array, ICollectionView, IList, XMLList, XML, Object, ArrayCollection 을 받을 수 있습니다.

    Array = ArrayCollection 
    IList = ListCollectionView
    XMLList = XMLListCollection
    XML = XMLList = XMLListCollection
    Object = ArrayCollection

    로 변경 사용합니다.

    그럼 왜 collection 계열로 변환하여 사용할까요?
    먼저 ArrayCollection 와 XMLListCollection을 보시겠습니다.
    두개의 컬렉션은 ListCollectionView 클레스를 확장하여 만들었습니다.

    ListCollectionView는 IEventDispatcher를 확장한 ICollectionView 와 IList, 그리고 IMXMLObject 등의 인터페이스를 구현했다
     

    ICollectionView 인터페이스는 해당 Collection에서 데이터를 변경하지 않고, 데이터의 정렬 또는 필터링을 가능하게 해줍니다. 
    또한 해당 Collection에서 IViewCursor를 제공하여서 데이터에 대한 접근 및 변경을 지원합니다. (모니터링,필터링 지원)

    하지만~~~~

* Array의 경우에도 Array.splice를 이용하면 특정 인덱스의 값을 추가, 삭제할 수 있습니다.

ArrayCollection의 존재 이유는,Array의 경우, EventDispatcher가 아니어서 그렇습니다.

EventDispatcher가 아니기 때문에 Array의 특정 인덱스의 값이 변경되었을 때, propertyChanged 이벤트가 발생하지 않습니다. :')
(즉, 데이터 바인딩이 직관적으로 이루어지지 않습니다. 내부 값이 변경되어도, 별도의 핸들링을 해주지 않으면 View가 바뀌지 않지요.)

이러한 문제를 Object Proxy와 기타 간편한 인터페이스로 해결한 것이 ArrayCollection입니다. :')

보다 자세한 내용은, ListCollectionView의 내부 구현 중, flash_proxy 네임스페이스로 묶인 부분을 보시면 자세히 알 수 있어요 ㅎㅎ


이것만은 꼭 알아두자!
Array와 XMLList은 데이터일 뿐이다. 데이터 변동이 있더라도 외부에 알릴 수 있는 통로가 없다. 그의 단점을 보완한것이 ArrayList와 XMLListAdapter이다. 
이는 IList를 구현했으며 원하는 위치에 데이터를 바꿀 수 있고 그에 따라 이벤트를 송출할 수 있다. ArrayCollection과 XMLListCollection은 IList, ICollection등을
구현해서 IList기능 뿐이 아니라 ICollection의 데이터 정렬/필터링 기능을 가진다

(참고사이트 : http://blog.flashplatform.kr/171 )
(참고사이트 : http://blog.jidolstar.com/375)